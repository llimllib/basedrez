// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/llimllib/basedrez/ent/game"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// WhitePlayerId holds the value of the "whitePlayerId" field.
	WhitePlayerId string `json:"whitePlayerId,omitempty"`
	// WhitePlayerName holds the value of the "whitePlayerName" field.
	WhitePlayerName string `json:"whitePlayerName,omitempty"`
	// WhitePlayerRatingDiff holds the value of the "whitePlayerRatingDiff" field.
	WhitePlayerRatingDiff string `json:"whitePlayerRatingDiff,omitempty"`
	// BlackPlayerId holds the value of the "blackPlayerId" field.
	BlackPlayerId string `json:"blackPlayerId,omitempty"`
	// BlackPlayerName holds the value of the "blackPlayerName" field.
	BlackPlayerName string `json:"blackPlayerName,omitempty"`
	// BlackPlayerRatingDiff holds the value of the "blackPlayerRatingDiff" field.
	BlackPlayerRatingDiff string `json:"blackPlayerRatingDiff,omitempty"`
	// Winner holds the value of the "winner" field.
	Winner string `json:"winner,omitempty"`
	// Moves holds the value of the "moves" field.
	Moves string `json:"moves,omitempty"`
	// ClockInitial holds the value of the "clockInitial" field.
	ClockInitial string `json:"clockInitial,omitempty"`
	// ClockIncrement holds the value of the "clockIncrement" field.
	ClockIncrement string `json:"clockIncrement,omitempty"`
	// ClockTotal holds the value of the "clockTotal" field.
	ClockTotal string `json:"clockTotal,omitempty"`
	// Pgn holds the value of the "pgn" field.
	Pgn string `json:"pgn,omitempty"`
	// Rated holds the value of the "rated" field.
	Rated string `json:"rated,omitempty"`
	// Variant holds the value of the "variant" field.
	Variant string `json:"variant,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed string `json:"speed,omitempty"`
	// Perf holds the value of the "perf" field.
	Perf string `json:"perf,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt string `json:"createdAt,omitempty"`
	// LastMoveAt holds the value of the "lastMoveAt" field.
	LastMoveAt string `json:"lastMoveAt,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldID, game.FieldWhitePlayerId, game.FieldWhitePlayerName, game.FieldWhitePlayerRatingDiff, game.FieldBlackPlayerId, game.FieldBlackPlayerName, game.FieldBlackPlayerRatingDiff, game.FieldWinner, game.FieldMoves, game.FieldClockInitial, game.FieldClockIncrement, game.FieldClockTotal, game.FieldPgn, game.FieldRated, game.FieldVariant, game.FieldSpeed, game.FieldPerf, game.FieldCreatedAt, game.FieldLastMoveAt, game.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Game", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ga.ID = value.String
			}
		case game.FieldWhitePlayerId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whitePlayerId", values[i])
			} else if value.Valid {
				ga.WhitePlayerId = value.String
			}
		case game.FieldWhitePlayerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whitePlayerName", values[i])
			} else if value.Valid {
				ga.WhitePlayerName = value.String
			}
		case game.FieldWhitePlayerRatingDiff:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whitePlayerRatingDiff", values[i])
			} else if value.Valid {
				ga.WhitePlayerRatingDiff = value.String
			}
		case game.FieldBlackPlayerId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blackPlayerId", values[i])
			} else if value.Valid {
				ga.BlackPlayerId = value.String
			}
		case game.FieldBlackPlayerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blackPlayerName", values[i])
			} else if value.Valid {
				ga.BlackPlayerName = value.String
			}
		case game.FieldBlackPlayerRatingDiff:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blackPlayerRatingDiff", values[i])
			} else if value.Valid {
				ga.BlackPlayerRatingDiff = value.String
			}
		case game.FieldWinner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field winner", values[i])
			} else if value.Valid {
				ga.Winner = value.String
			}
		case game.FieldMoves:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field moves", values[i])
			} else if value.Valid {
				ga.Moves = value.String
			}
		case game.FieldClockInitial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clockInitial", values[i])
			} else if value.Valid {
				ga.ClockInitial = value.String
			}
		case game.FieldClockIncrement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clockIncrement", values[i])
			} else if value.Valid {
				ga.ClockIncrement = value.String
			}
		case game.FieldClockTotal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clockTotal", values[i])
			} else if value.Valid {
				ga.ClockTotal = value.String
			}
		case game.FieldPgn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pgn", values[i])
			} else if value.Valid {
				ga.Pgn = value.String
			}
		case game.FieldRated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rated", values[i])
			} else if value.Valid {
				ga.Rated = value.String
			}
		case game.FieldVariant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field variant", values[i])
			} else if value.Valid {
				ga.Variant = value.String
			}
		case game.FieldSpeed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				ga.Speed = value.String
			}
		case game.FieldPerf:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field perf", values[i])
			} else if value.Valid {
				ga.Perf = value.String
			}
		case game.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.String
			}
		case game.FieldLastMoveAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastMoveAt", values[i])
			} else if value.Valid {
				ga.LastMoveAt = value.String
			}
		case game.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ga.Status = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return (&GameClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("whitePlayerId=")
	builder.WriteString(ga.WhitePlayerId)
	builder.WriteString(", ")
	builder.WriteString("whitePlayerName=")
	builder.WriteString(ga.WhitePlayerName)
	builder.WriteString(", ")
	builder.WriteString("whitePlayerRatingDiff=")
	builder.WriteString(ga.WhitePlayerRatingDiff)
	builder.WriteString(", ")
	builder.WriteString("blackPlayerId=")
	builder.WriteString(ga.BlackPlayerId)
	builder.WriteString(", ")
	builder.WriteString("blackPlayerName=")
	builder.WriteString(ga.BlackPlayerName)
	builder.WriteString(", ")
	builder.WriteString("blackPlayerRatingDiff=")
	builder.WriteString(ga.BlackPlayerRatingDiff)
	builder.WriteString(", ")
	builder.WriteString("winner=")
	builder.WriteString(ga.Winner)
	builder.WriteString(", ")
	builder.WriteString("moves=")
	builder.WriteString(ga.Moves)
	builder.WriteString(", ")
	builder.WriteString("clockInitial=")
	builder.WriteString(ga.ClockInitial)
	builder.WriteString(", ")
	builder.WriteString("clockIncrement=")
	builder.WriteString(ga.ClockIncrement)
	builder.WriteString(", ")
	builder.WriteString("clockTotal=")
	builder.WriteString(ga.ClockTotal)
	builder.WriteString(", ")
	builder.WriteString("pgn=")
	builder.WriteString(ga.Pgn)
	builder.WriteString(", ")
	builder.WriteString("rated=")
	builder.WriteString(ga.Rated)
	builder.WriteString(", ")
	builder.WriteString("variant=")
	builder.WriteString(ga.Variant)
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(ga.Speed)
	builder.WriteString(", ")
	builder.WriteString("perf=")
	builder.WriteString(ga.Perf)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(ga.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("lastMoveAt=")
	builder.WriteString(ga.LastMoveAt)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ga.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Games is a parsable slice of Game.
type Games []*Game

func (ga Games) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
