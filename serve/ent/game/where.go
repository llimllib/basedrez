// Code generated by ent, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"github.com/llimllib/basedrez/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WhitePlayerId applies equality check predicate on the "whitePlayerId" field. It's identical to WhitePlayerIdEQ.
func WhitePlayerId(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerName applies equality check predicate on the "whitePlayerName" field. It's identical to WhitePlayerNameEQ.
func WhitePlayerName(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerRatingDiff applies equality check predicate on the "whitePlayerRatingDiff" field. It's identical to WhitePlayerRatingDiffEQ.
func WhitePlayerRatingDiff(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// BlackPlayerId applies equality check predicate on the "blackPlayerId" field. It's identical to BlackPlayerIdEQ.
func BlackPlayerId(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerName applies equality check predicate on the "blackPlayerName" field. It's identical to BlackPlayerNameEQ.
func BlackPlayerName(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerRatingDiff applies equality check predicate on the "blackPlayerRatingDiff" field. It's identical to BlackPlayerRatingDiffEQ.
func BlackPlayerRatingDiff(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// Winner applies equality check predicate on the "winner" field. It's identical to WinnerEQ.
func Winner(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWinner), v))
	})
}

// Moves applies equality check predicate on the "moves" field. It's identical to MovesEQ.
func Moves(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoves), v))
	})
}

// ClockInitial applies equality check predicate on the "clockInitial" field. It's identical to ClockInitialEQ.
func ClockInitial(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockInitial), v))
	})
}

// ClockIncrement applies equality check predicate on the "clockIncrement" field. It's identical to ClockIncrementEQ.
func ClockIncrement(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockIncrement), v))
	})
}

// ClockTotal applies equality check predicate on the "clockTotal" field. It's identical to ClockTotalEQ.
func ClockTotal(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockTotal), v))
	})
}

// Pgn applies equality check predicate on the "pgn" field. It's identical to PgnEQ.
func Pgn(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPgn), v))
	})
}

// Rated applies equality check predicate on the "rated" field. It's identical to RatedEQ.
func Rated(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRated), v))
	})
}

// Variant applies equality check predicate on the "variant" field. It's identical to VariantEQ.
func Variant(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVariant), v))
	})
}

// Speed applies equality check predicate on the "speed" field. It's identical to SpeedEQ.
func Speed(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeed), v))
	})
}

// Perf applies equality check predicate on the "perf" field. It's identical to PerfEQ.
func Perf(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPerf), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// LastMoveAt applies equality check predicate on the "lastMoveAt" field. It's identical to LastMoveAtEQ.
func LastMoveAt(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastMoveAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// WhitePlayerIdEQ applies the EQ predicate on the "whitePlayerId" field.
func WhitePlayerIdEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdNEQ applies the NEQ predicate on the "whitePlayerId" field.
func WhitePlayerIdNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdIn applies the In predicate on the "whitePlayerId" field.
func WhitePlayerIdIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWhitePlayerId), v...))
	})
}

// WhitePlayerIdNotIn applies the NotIn predicate on the "whitePlayerId" field.
func WhitePlayerIdNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWhitePlayerId), v...))
	})
}

// WhitePlayerIdGT applies the GT predicate on the "whitePlayerId" field.
func WhitePlayerIdGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdGTE applies the GTE predicate on the "whitePlayerId" field.
func WhitePlayerIdGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdLT applies the LT predicate on the "whitePlayerId" field.
func WhitePlayerIdLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdLTE applies the LTE predicate on the "whitePlayerId" field.
func WhitePlayerIdLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdContains applies the Contains predicate on the "whitePlayerId" field.
func WhitePlayerIdContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdHasPrefix applies the HasPrefix predicate on the "whitePlayerId" field.
func WhitePlayerIdHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdHasSuffix applies the HasSuffix predicate on the "whitePlayerId" field.
func WhitePlayerIdHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdEqualFold applies the EqualFold predicate on the "whitePlayerId" field.
func WhitePlayerIdEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerIdContainsFold applies the ContainsFold predicate on the "whitePlayerId" field.
func WhitePlayerIdContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWhitePlayerId), v))
	})
}

// WhitePlayerNameEQ applies the EQ predicate on the "whitePlayerName" field.
func WhitePlayerNameEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameNEQ applies the NEQ predicate on the "whitePlayerName" field.
func WhitePlayerNameNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameIn applies the In predicate on the "whitePlayerName" field.
func WhitePlayerNameIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWhitePlayerName), v...))
	})
}

// WhitePlayerNameNotIn applies the NotIn predicate on the "whitePlayerName" field.
func WhitePlayerNameNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWhitePlayerName), v...))
	})
}

// WhitePlayerNameGT applies the GT predicate on the "whitePlayerName" field.
func WhitePlayerNameGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameGTE applies the GTE predicate on the "whitePlayerName" field.
func WhitePlayerNameGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameLT applies the LT predicate on the "whitePlayerName" field.
func WhitePlayerNameLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameLTE applies the LTE predicate on the "whitePlayerName" field.
func WhitePlayerNameLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameContains applies the Contains predicate on the "whitePlayerName" field.
func WhitePlayerNameContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameHasPrefix applies the HasPrefix predicate on the "whitePlayerName" field.
func WhitePlayerNameHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameHasSuffix applies the HasSuffix predicate on the "whitePlayerName" field.
func WhitePlayerNameHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameEqualFold applies the EqualFold predicate on the "whitePlayerName" field.
func WhitePlayerNameEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerNameContainsFold applies the ContainsFold predicate on the "whitePlayerName" field.
func WhitePlayerNameContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWhitePlayerName), v))
	})
}

// WhitePlayerRatingDiffEQ applies the EQ predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffNEQ applies the NEQ predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffIn applies the In predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWhitePlayerRatingDiff), v...))
	})
}

// WhitePlayerRatingDiffNotIn applies the NotIn predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWhitePlayerRatingDiff), v...))
	})
}

// WhitePlayerRatingDiffGT applies the GT predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffGTE applies the GTE predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffLT applies the LT predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffLTE applies the LTE predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffContains applies the Contains predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffHasPrefix applies the HasPrefix predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffHasSuffix applies the HasSuffix predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffEqualFold applies the EqualFold predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// WhitePlayerRatingDiffContainsFold applies the ContainsFold predicate on the "whitePlayerRatingDiff" field.
func WhitePlayerRatingDiffContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWhitePlayerRatingDiff), v))
	})
}

// BlackPlayerIdEQ applies the EQ predicate on the "blackPlayerId" field.
func BlackPlayerIdEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdNEQ applies the NEQ predicate on the "blackPlayerId" field.
func BlackPlayerIdNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdIn applies the In predicate on the "blackPlayerId" field.
func BlackPlayerIdIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlackPlayerId), v...))
	})
}

// BlackPlayerIdNotIn applies the NotIn predicate on the "blackPlayerId" field.
func BlackPlayerIdNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlackPlayerId), v...))
	})
}

// BlackPlayerIdGT applies the GT predicate on the "blackPlayerId" field.
func BlackPlayerIdGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdGTE applies the GTE predicate on the "blackPlayerId" field.
func BlackPlayerIdGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdLT applies the LT predicate on the "blackPlayerId" field.
func BlackPlayerIdLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdLTE applies the LTE predicate on the "blackPlayerId" field.
func BlackPlayerIdLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdContains applies the Contains predicate on the "blackPlayerId" field.
func BlackPlayerIdContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdHasPrefix applies the HasPrefix predicate on the "blackPlayerId" field.
func BlackPlayerIdHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdHasSuffix applies the HasSuffix predicate on the "blackPlayerId" field.
func BlackPlayerIdHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdEqualFold applies the EqualFold predicate on the "blackPlayerId" field.
func BlackPlayerIdEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerIdContainsFold applies the ContainsFold predicate on the "blackPlayerId" field.
func BlackPlayerIdContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBlackPlayerId), v))
	})
}

// BlackPlayerNameEQ applies the EQ predicate on the "blackPlayerName" field.
func BlackPlayerNameEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameNEQ applies the NEQ predicate on the "blackPlayerName" field.
func BlackPlayerNameNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameIn applies the In predicate on the "blackPlayerName" field.
func BlackPlayerNameIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlackPlayerName), v...))
	})
}

// BlackPlayerNameNotIn applies the NotIn predicate on the "blackPlayerName" field.
func BlackPlayerNameNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlackPlayerName), v...))
	})
}

// BlackPlayerNameGT applies the GT predicate on the "blackPlayerName" field.
func BlackPlayerNameGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameGTE applies the GTE predicate on the "blackPlayerName" field.
func BlackPlayerNameGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameLT applies the LT predicate on the "blackPlayerName" field.
func BlackPlayerNameLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameLTE applies the LTE predicate on the "blackPlayerName" field.
func BlackPlayerNameLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameContains applies the Contains predicate on the "blackPlayerName" field.
func BlackPlayerNameContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameHasPrefix applies the HasPrefix predicate on the "blackPlayerName" field.
func BlackPlayerNameHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameHasSuffix applies the HasSuffix predicate on the "blackPlayerName" field.
func BlackPlayerNameHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameEqualFold applies the EqualFold predicate on the "blackPlayerName" field.
func BlackPlayerNameEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerNameContainsFold applies the ContainsFold predicate on the "blackPlayerName" field.
func BlackPlayerNameContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBlackPlayerName), v))
	})
}

// BlackPlayerRatingDiffEQ applies the EQ predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffNEQ applies the NEQ predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffIn applies the In predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlackPlayerRatingDiff), v...))
	})
}

// BlackPlayerRatingDiffNotIn applies the NotIn predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlackPlayerRatingDiff), v...))
	})
}

// BlackPlayerRatingDiffGT applies the GT predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffGTE applies the GTE predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffLT applies the LT predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffLTE applies the LTE predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffContains applies the Contains predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffHasPrefix applies the HasPrefix predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffHasSuffix applies the HasSuffix predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffEqualFold applies the EqualFold predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// BlackPlayerRatingDiffContainsFold applies the ContainsFold predicate on the "blackPlayerRatingDiff" field.
func BlackPlayerRatingDiffContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBlackPlayerRatingDiff), v))
	})
}

// WinnerEQ applies the EQ predicate on the "winner" field.
func WinnerEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWinner), v))
	})
}

// WinnerNEQ applies the NEQ predicate on the "winner" field.
func WinnerNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWinner), v))
	})
}

// WinnerIn applies the In predicate on the "winner" field.
func WinnerIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWinner), v...))
	})
}

// WinnerNotIn applies the NotIn predicate on the "winner" field.
func WinnerNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWinner), v...))
	})
}

// WinnerGT applies the GT predicate on the "winner" field.
func WinnerGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWinner), v))
	})
}

// WinnerGTE applies the GTE predicate on the "winner" field.
func WinnerGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWinner), v))
	})
}

// WinnerLT applies the LT predicate on the "winner" field.
func WinnerLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWinner), v))
	})
}

// WinnerLTE applies the LTE predicate on the "winner" field.
func WinnerLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWinner), v))
	})
}

// WinnerContains applies the Contains predicate on the "winner" field.
func WinnerContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWinner), v))
	})
}

// WinnerHasPrefix applies the HasPrefix predicate on the "winner" field.
func WinnerHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWinner), v))
	})
}

// WinnerHasSuffix applies the HasSuffix predicate on the "winner" field.
func WinnerHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWinner), v))
	})
}

// WinnerEqualFold applies the EqualFold predicate on the "winner" field.
func WinnerEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWinner), v))
	})
}

// WinnerContainsFold applies the ContainsFold predicate on the "winner" field.
func WinnerContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWinner), v))
	})
}

// MovesEQ applies the EQ predicate on the "moves" field.
func MovesEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoves), v))
	})
}

// MovesNEQ applies the NEQ predicate on the "moves" field.
func MovesNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMoves), v))
	})
}

// MovesIn applies the In predicate on the "moves" field.
func MovesIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMoves), v...))
	})
}

// MovesNotIn applies the NotIn predicate on the "moves" field.
func MovesNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMoves), v...))
	})
}

// MovesGT applies the GT predicate on the "moves" field.
func MovesGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMoves), v))
	})
}

// MovesGTE applies the GTE predicate on the "moves" field.
func MovesGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMoves), v))
	})
}

// MovesLT applies the LT predicate on the "moves" field.
func MovesLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMoves), v))
	})
}

// MovesLTE applies the LTE predicate on the "moves" field.
func MovesLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMoves), v))
	})
}

// MovesContains applies the Contains predicate on the "moves" field.
func MovesContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMoves), v))
	})
}

// MovesHasPrefix applies the HasPrefix predicate on the "moves" field.
func MovesHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMoves), v))
	})
}

// MovesHasSuffix applies the HasSuffix predicate on the "moves" field.
func MovesHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMoves), v))
	})
}

// MovesEqualFold applies the EqualFold predicate on the "moves" field.
func MovesEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMoves), v))
	})
}

// MovesContainsFold applies the ContainsFold predicate on the "moves" field.
func MovesContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMoves), v))
	})
}

// ClockInitialEQ applies the EQ predicate on the "clockInitial" field.
func ClockInitialEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockInitial), v))
	})
}

// ClockInitialNEQ applies the NEQ predicate on the "clockInitial" field.
func ClockInitialNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClockInitial), v))
	})
}

// ClockInitialIn applies the In predicate on the "clockInitial" field.
func ClockInitialIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClockInitial), v...))
	})
}

// ClockInitialNotIn applies the NotIn predicate on the "clockInitial" field.
func ClockInitialNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClockInitial), v...))
	})
}

// ClockInitialGT applies the GT predicate on the "clockInitial" field.
func ClockInitialGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClockInitial), v))
	})
}

// ClockInitialGTE applies the GTE predicate on the "clockInitial" field.
func ClockInitialGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClockInitial), v))
	})
}

// ClockInitialLT applies the LT predicate on the "clockInitial" field.
func ClockInitialLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClockInitial), v))
	})
}

// ClockInitialLTE applies the LTE predicate on the "clockInitial" field.
func ClockInitialLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClockInitial), v))
	})
}

// ClockInitialContains applies the Contains predicate on the "clockInitial" field.
func ClockInitialContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClockInitial), v))
	})
}

// ClockInitialHasPrefix applies the HasPrefix predicate on the "clockInitial" field.
func ClockInitialHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClockInitial), v))
	})
}

// ClockInitialHasSuffix applies the HasSuffix predicate on the "clockInitial" field.
func ClockInitialHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClockInitial), v))
	})
}

// ClockInitialEqualFold applies the EqualFold predicate on the "clockInitial" field.
func ClockInitialEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClockInitial), v))
	})
}

// ClockInitialContainsFold applies the ContainsFold predicate on the "clockInitial" field.
func ClockInitialContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClockInitial), v))
	})
}

// ClockIncrementEQ applies the EQ predicate on the "clockIncrement" field.
func ClockIncrementEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementNEQ applies the NEQ predicate on the "clockIncrement" field.
func ClockIncrementNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementIn applies the In predicate on the "clockIncrement" field.
func ClockIncrementIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClockIncrement), v...))
	})
}

// ClockIncrementNotIn applies the NotIn predicate on the "clockIncrement" field.
func ClockIncrementNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClockIncrement), v...))
	})
}

// ClockIncrementGT applies the GT predicate on the "clockIncrement" field.
func ClockIncrementGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementGTE applies the GTE predicate on the "clockIncrement" field.
func ClockIncrementGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementLT applies the LT predicate on the "clockIncrement" field.
func ClockIncrementLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementLTE applies the LTE predicate on the "clockIncrement" field.
func ClockIncrementLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementContains applies the Contains predicate on the "clockIncrement" field.
func ClockIncrementContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementHasPrefix applies the HasPrefix predicate on the "clockIncrement" field.
func ClockIncrementHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementHasSuffix applies the HasSuffix predicate on the "clockIncrement" field.
func ClockIncrementHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementEqualFold applies the EqualFold predicate on the "clockIncrement" field.
func ClockIncrementEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClockIncrement), v))
	})
}

// ClockIncrementContainsFold applies the ContainsFold predicate on the "clockIncrement" field.
func ClockIncrementContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClockIncrement), v))
	})
}

// ClockTotalEQ applies the EQ predicate on the "clockTotal" field.
func ClockTotalEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClockTotal), v))
	})
}

// ClockTotalNEQ applies the NEQ predicate on the "clockTotal" field.
func ClockTotalNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClockTotal), v))
	})
}

// ClockTotalIn applies the In predicate on the "clockTotal" field.
func ClockTotalIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClockTotal), v...))
	})
}

// ClockTotalNotIn applies the NotIn predicate on the "clockTotal" field.
func ClockTotalNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClockTotal), v...))
	})
}

// ClockTotalGT applies the GT predicate on the "clockTotal" field.
func ClockTotalGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClockTotal), v))
	})
}

// ClockTotalGTE applies the GTE predicate on the "clockTotal" field.
func ClockTotalGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClockTotal), v))
	})
}

// ClockTotalLT applies the LT predicate on the "clockTotal" field.
func ClockTotalLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClockTotal), v))
	})
}

// ClockTotalLTE applies the LTE predicate on the "clockTotal" field.
func ClockTotalLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClockTotal), v))
	})
}

// ClockTotalContains applies the Contains predicate on the "clockTotal" field.
func ClockTotalContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClockTotal), v))
	})
}

// ClockTotalHasPrefix applies the HasPrefix predicate on the "clockTotal" field.
func ClockTotalHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClockTotal), v))
	})
}

// ClockTotalHasSuffix applies the HasSuffix predicate on the "clockTotal" field.
func ClockTotalHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClockTotal), v))
	})
}

// ClockTotalEqualFold applies the EqualFold predicate on the "clockTotal" field.
func ClockTotalEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClockTotal), v))
	})
}

// ClockTotalContainsFold applies the ContainsFold predicate on the "clockTotal" field.
func ClockTotalContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClockTotal), v))
	})
}

// PgnEQ applies the EQ predicate on the "pgn" field.
func PgnEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPgn), v))
	})
}

// PgnNEQ applies the NEQ predicate on the "pgn" field.
func PgnNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPgn), v))
	})
}

// PgnIn applies the In predicate on the "pgn" field.
func PgnIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPgn), v...))
	})
}

// PgnNotIn applies the NotIn predicate on the "pgn" field.
func PgnNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPgn), v...))
	})
}

// PgnGT applies the GT predicate on the "pgn" field.
func PgnGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPgn), v))
	})
}

// PgnGTE applies the GTE predicate on the "pgn" field.
func PgnGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPgn), v))
	})
}

// PgnLT applies the LT predicate on the "pgn" field.
func PgnLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPgn), v))
	})
}

// PgnLTE applies the LTE predicate on the "pgn" field.
func PgnLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPgn), v))
	})
}

// PgnContains applies the Contains predicate on the "pgn" field.
func PgnContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPgn), v))
	})
}

// PgnHasPrefix applies the HasPrefix predicate on the "pgn" field.
func PgnHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPgn), v))
	})
}

// PgnHasSuffix applies the HasSuffix predicate on the "pgn" field.
func PgnHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPgn), v))
	})
}

// PgnEqualFold applies the EqualFold predicate on the "pgn" field.
func PgnEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPgn), v))
	})
}

// PgnContainsFold applies the ContainsFold predicate on the "pgn" field.
func PgnContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPgn), v))
	})
}

// RatedEQ applies the EQ predicate on the "rated" field.
func RatedEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRated), v))
	})
}

// RatedNEQ applies the NEQ predicate on the "rated" field.
func RatedNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRated), v))
	})
}

// RatedIn applies the In predicate on the "rated" field.
func RatedIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRated), v...))
	})
}

// RatedNotIn applies the NotIn predicate on the "rated" field.
func RatedNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRated), v...))
	})
}

// RatedGT applies the GT predicate on the "rated" field.
func RatedGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRated), v))
	})
}

// RatedGTE applies the GTE predicate on the "rated" field.
func RatedGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRated), v))
	})
}

// RatedLT applies the LT predicate on the "rated" field.
func RatedLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRated), v))
	})
}

// RatedLTE applies the LTE predicate on the "rated" field.
func RatedLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRated), v))
	})
}

// RatedContains applies the Contains predicate on the "rated" field.
func RatedContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRated), v))
	})
}

// RatedHasPrefix applies the HasPrefix predicate on the "rated" field.
func RatedHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRated), v))
	})
}

// RatedHasSuffix applies the HasSuffix predicate on the "rated" field.
func RatedHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRated), v))
	})
}

// RatedEqualFold applies the EqualFold predicate on the "rated" field.
func RatedEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRated), v))
	})
}

// RatedContainsFold applies the ContainsFold predicate on the "rated" field.
func RatedContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRated), v))
	})
}

// VariantEQ applies the EQ predicate on the "variant" field.
func VariantEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVariant), v))
	})
}

// VariantNEQ applies the NEQ predicate on the "variant" field.
func VariantNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVariant), v))
	})
}

// VariantIn applies the In predicate on the "variant" field.
func VariantIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVariant), v...))
	})
}

// VariantNotIn applies the NotIn predicate on the "variant" field.
func VariantNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVariant), v...))
	})
}

// VariantGT applies the GT predicate on the "variant" field.
func VariantGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVariant), v))
	})
}

// VariantGTE applies the GTE predicate on the "variant" field.
func VariantGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVariant), v))
	})
}

// VariantLT applies the LT predicate on the "variant" field.
func VariantLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVariant), v))
	})
}

// VariantLTE applies the LTE predicate on the "variant" field.
func VariantLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVariant), v))
	})
}

// VariantContains applies the Contains predicate on the "variant" field.
func VariantContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVariant), v))
	})
}

// VariantHasPrefix applies the HasPrefix predicate on the "variant" field.
func VariantHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVariant), v))
	})
}

// VariantHasSuffix applies the HasSuffix predicate on the "variant" field.
func VariantHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVariant), v))
	})
}

// VariantEqualFold applies the EqualFold predicate on the "variant" field.
func VariantEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVariant), v))
	})
}

// VariantContainsFold applies the ContainsFold predicate on the "variant" field.
func VariantContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVariant), v))
	})
}

// SpeedEQ applies the EQ predicate on the "speed" field.
func SpeedEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeed), v))
	})
}

// SpeedNEQ applies the NEQ predicate on the "speed" field.
func SpeedNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpeed), v))
	})
}

// SpeedIn applies the In predicate on the "speed" field.
func SpeedIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSpeed), v...))
	})
}

// SpeedNotIn applies the NotIn predicate on the "speed" field.
func SpeedNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSpeed), v...))
	})
}

// SpeedGT applies the GT predicate on the "speed" field.
func SpeedGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpeed), v))
	})
}

// SpeedGTE applies the GTE predicate on the "speed" field.
func SpeedGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpeed), v))
	})
}

// SpeedLT applies the LT predicate on the "speed" field.
func SpeedLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpeed), v))
	})
}

// SpeedLTE applies the LTE predicate on the "speed" field.
func SpeedLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpeed), v))
	})
}

// SpeedContains applies the Contains predicate on the "speed" field.
func SpeedContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpeed), v))
	})
}

// SpeedHasPrefix applies the HasPrefix predicate on the "speed" field.
func SpeedHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpeed), v))
	})
}

// SpeedHasSuffix applies the HasSuffix predicate on the "speed" field.
func SpeedHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpeed), v))
	})
}

// SpeedEqualFold applies the EqualFold predicate on the "speed" field.
func SpeedEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpeed), v))
	})
}

// SpeedContainsFold applies the ContainsFold predicate on the "speed" field.
func SpeedContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpeed), v))
	})
}

// PerfEQ applies the EQ predicate on the "perf" field.
func PerfEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPerf), v))
	})
}

// PerfNEQ applies the NEQ predicate on the "perf" field.
func PerfNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPerf), v))
	})
}

// PerfIn applies the In predicate on the "perf" field.
func PerfIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPerf), v...))
	})
}

// PerfNotIn applies the NotIn predicate on the "perf" field.
func PerfNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPerf), v...))
	})
}

// PerfGT applies the GT predicate on the "perf" field.
func PerfGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPerf), v))
	})
}

// PerfGTE applies the GTE predicate on the "perf" field.
func PerfGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPerf), v))
	})
}

// PerfLT applies the LT predicate on the "perf" field.
func PerfLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPerf), v))
	})
}

// PerfLTE applies the LTE predicate on the "perf" field.
func PerfLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPerf), v))
	})
}

// PerfContains applies the Contains predicate on the "perf" field.
func PerfContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPerf), v))
	})
}

// PerfHasPrefix applies the HasPrefix predicate on the "perf" field.
func PerfHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPerf), v))
	})
}

// PerfHasSuffix applies the HasSuffix predicate on the "perf" field.
func PerfHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPerf), v))
	})
}

// PerfEqualFold applies the EqualFold predicate on the "perf" field.
func PerfEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPerf), v))
	})
}

// PerfContainsFold applies the ContainsFold predicate on the "perf" field.
func PerfContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPerf), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtContains applies the Contains predicate on the "createdAt" field.
func CreatedAtContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "createdAt" field.
func CreatedAtHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "createdAt" field.
func CreatedAtHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtEqualFold applies the EqualFold predicate on the "createdAt" field.
func CreatedAtEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtContainsFold applies the ContainsFold predicate on the "createdAt" field.
func CreatedAtContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedAt), v))
	})
}

// LastMoveAtEQ applies the EQ predicate on the "lastMoveAt" field.
func LastMoveAtEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtNEQ applies the NEQ predicate on the "lastMoveAt" field.
func LastMoveAtNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtIn applies the In predicate on the "lastMoveAt" field.
func LastMoveAtIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastMoveAt), v...))
	})
}

// LastMoveAtNotIn applies the NotIn predicate on the "lastMoveAt" field.
func LastMoveAtNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastMoveAt), v...))
	})
}

// LastMoveAtGT applies the GT predicate on the "lastMoveAt" field.
func LastMoveAtGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtGTE applies the GTE predicate on the "lastMoveAt" field.
func LastMoveAtGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtLT applies the LT predicate on the "lastMoveAt" field.
func LastMoveAtLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtLTE applies the LTE predicate on the "lastMoveAt" field.
func LastMoveAtLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtContains applies the Contains predicate on the "lastMoveAt" field.
func LastMoveAtContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtHasPrefix applies the HasPrefix predicate on the "lastMoveAt" field.
func LastMoveAtHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtHasSuffix applies the HasSuffix predicate on the "lastMoveAt" field.
func LastMoveAtHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtEqualFold applies the EqualFold predicate on the "lastMoveAt" field.
func LastMoveAtEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastMoveAt), v))
	})
}

// LastMoveAtContainsFold applies the ContainsFold predicate on the "lastMoveAt" field.
func LastMoveAtContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastMoveAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		p(s.Not())
	})
}
