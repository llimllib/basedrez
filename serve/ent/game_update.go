// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/llimllib/basedrez/ent/game"
	"github.com/llimllib/basedrez/ent/predicate"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetWhitePlayerId sets the "whitePlayerId" field.
func (gu *GameUpdate) SetWhitePlayerId(s string) *GameUpdate {
	gu.mutation.SetWhitePlayerId(s)
	return gu
}

// SetWhitePlayerName sets the "whitePlayerName" field.
func (gu *GameUpdate) SetWhitePlayerName(s string) *GameUpdate {
	gu.mutation.SetWhitePlayerName(s)
	return gu
}

// SetWhitePlayerRatingDiff sets the "whitePlayerRatingDiff" field.
func (gu *GameUpdate) SetWhitePlayerRatingDiff(s string) *GameUpdate {
	gu.mutation.SetWhitePlayerRatingDiff(s)
	return gu
}

// SetBlackPlayerId sets the "blackPlayerId" field.
func (gu *GameUpdate) SetBlackPlayerId(s string) *GameUpdate {
	gu.mutation.SetBlackPlayerId(s)
	return gu
}

// SetBlackPlayerName sets the "blackPlayerName" field.
func (gu *GameUpdate) SetBlackPlayerName(s string) *GameUpdate {
	gu.mutation.SetBlackPlayerName(s)
	return gu
}

// SetBlackPlayerRatingDiff sets the "blackPlayerRatingDiff" field.
func (gu *GameUpdate) SetBlackPlayerRatingDiff(s string) *GameUpdate {
	gu.mutation.SetBlackPlayerRatingDiff(s)
	return gu
}

// SetWinner sets the "winner" field.
func (gu *GameUpdate) SetWinner(s string) *GameUpdate {
	gu.mutation.SetWinner(s)
	return gu
}

// SetMoves sets the "moves" field.
func (gu *GameUpdate) SetMoves(s string) *GameUpdate {
	gu.mutation.SetMoves(s)
	return gu
}

// SetClockInitial sets the "clockInitial" field.
func (gu *GameUpdate) SetClockInitial(s string) *GameUpdate {
	gu.mutation.SetClockInitial(s)
	return gu
}

// SetClockIncrement sets the "clockIncrement" field.
func (gu *GameUpdate) SetClockIncrement(s string) *GameUpdate {
	gu.mutation.SetClockIncrement(s)
	return gu
}

// SetClockTotal sets the "clockTotal" field.
func (gu *GameUpdate) SetClockTotal(s string) *GameUpdate {
	gu.mutation.SetClockTotal(s)
	return gu
}

// SetPgn sets the "pgn" field.
func (gu *GameUpdate) SetPgn(s string) *GameUpdate {
	gu.mutation.SetPgn(s)
	return gu
}

// SetRated sets the "rated" field.
func (gu *GameUpdate) SetRated(s string) *GameUpdate {
	gu.mutation.SetRated(s)
	return gu
}

// SetVariant sets the "variant" field.
func (gu *GameUpdate) SetVariant(s string) *GameUpdate {
	gu.mutation.SetVariant(s)
	return gu
}

// SetSpeed sets the "speed" field.
func (gu *GameUpdate) SetSpeed(s string) *GameUpdate {
	gu.mutation.SetSpeed(s)
	return gu
}

// SetPerf sets the "perf" field.
func (gu *GameUpdate) SetPerf(s string) *GameUpdate {
	gu.mutation.SetPerf(s)
	return gu
}

// SetCreatedAt sets the "createdAt" field.
func (gu *GameUpdate) SetCreatedAt(s string) *GameUpdate {
	gu.mutation.SetCreatedAt(s)
	return gu
}

// SetLastMoveAt sets the "lastMoveAt" field.
func (gu *GameUpdate) SetLastMoveAt(s string) *GameUpdate {
	gu.mutation.SetLastMoveAt(s)
	return gu
}

// SetStatus sets the "status" field.
func (gu *GameUpdate) SetStatus(s string) *GameUpdate {
	gu.mutation.SetStatus(s)
	return gu
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: game.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.WhitePlayerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWhitePlayerId,
		})
	}
	if value, ok := gu.mutation.WhitePlayerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWhitePlayerName,
		})
	}
	if value, ok := gu.mutation.WhitePlayerRatingDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWhitePlayerRatingDiff,
		})
	}
	if value, ok := gu.mutation.BlackPlayerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldBlackPlayerId,
		})
	}
	if value, ok := gu.mutation.BlackPlayerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldBlackPlayerName,
		})
	}
	if value, ok := gu.mutation.BlackPlayerRatingDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldBlackPlayerRatingDiff,
		})
	}
	if value, ok := gu.mutation.Winner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWinner,
		})
	}
	if value, ok := gu.mutation.Moves(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldMoves,
		})
	}
	if value, ok := gu.mutation.ClockInitial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldClockInitial,
		})
	}
	if value, ok := gu.mutation.ClockIncrement(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldClockIncrement,
		})
	}
	if value, ok := gu.mutation.ClockTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldClockTotal,
		})
	}
	if value, ok := gu.mutation.Pgn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldPgn,
		})
	}
	if value, ok := gu.mutation.Rated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldRated,
		})
	}
	if value, ok := gu.mutation.Variant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldVariant,
		})
	}
	if value, ok := gu.mutation.Speed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldSpeed,
		})
	}
	if value, ok := gu.mutation.Perf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldPerf,
		})
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldCreatedAt,
		})
	}
	if value, ok := gu.mutation.LastMoveAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldLastMoveAt,
		})
	}
	if value, ok := gu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetWhitePlayerId sets the "whitePlayerId" field.
func (guo *GameUpdateOne) SetWhitePlayerId(s string) *GameUpdateOne {
	guo.mutation.SetWhitePlayerId(s)
	return guo
}

// SetWhitePlayerName sets the "whitePlayerName" field.
func (guo *GameUpdateOne) SetWhitePlayerName(s string) *GameUpdateOne {
	guo.mutation.SetWhitePlayerName(s)
	return guo
}

// SetWhitePlayerRatingDiff sets the "whitePlayerRatingDiff" field.
func (guo *GameUpdateOne) SetWhitePlayerRatingDiff(s string) *GameUpdateOne {
	guo.mutation.SetWhitePlayerRatingDiff(s)
	return guo
}

// SetBlackPlayerId sets the "blackPlayerId" field.
func (guo *GameUpdateOne) SetBlackPlayerId(s string) *GameUpdateOne {
	guo.mutation.SetBlackPlayerId(s)
	return guo
}

// SetBlackPlayerName sets the "blackPlayerName" field.
func (guo *GameUpdateOne) SetBlackPlayerName(s string) *GameUpdateOne {
	guo.mutation.SetBlackPlayerName(s)
	return guo
}

// SetBlackPlayerRatingDiff sets the "blackPlayerRatingDiff" field.
func (guo *GameUpdateOne) SetBlackPlayerRatingDiff(s string) *GameUpdateOne {
	guo.mutation.SetBlackPlayerRatingDiff(s)
	return guo
}

// SetWinner sets the "winner" field.
func (guo *GameUpdateOne) SetWinner(s string) *GameUpdateOne {
	guo.mutation.SetWinner(s)
	return guo
}

// SetMoves sets the "moves" field.
func (guo *GameUpdateOne) SetMoves(s string) *GameUpdateOne {
	guo.mutation.SetMoves(s)
	return guo
}

// SetClockInitial sets the "clockInitial" field.
func (guo *GameUpdateOne) SetClockInitial(s string) *GameUpdateOne {
	guo.mutation.SetClockInitial(s)
	return guo
}

// SetClockIncrement sets the "clockIncrement" field.
func (guo *GameUpdateOne) SetClockIncrement(s string) *GameUpdateOne {
	guo.mutation.SetClockIncrement(s)
	return guo
}

// SetClockTotal sets the "clockTotal" field.
func (guo *GameUpdateOne) SetClockTotal(s string) *GameUpdateOne {
	guo.mutation.SetClockTotal(s)
	return guo
}

// SetPgn sets the "pgn" field.
func (guo *GameUpdateOne) SetPgn(s string) *GameUpdateOne {
	guo.mutation.SetPgn(s)
	return guo
}

// SetRated sets the "rated" field.
func (guo *GameUpdateOne) SetRated(s string) *GameUpdateOne {
	guo.mutation.SetRated(s)
	return guo
}

// SetVariant sets the "variant" field.
func (guo *GameUpdateOne) SetVariant(s string) *GameUpdateOne {
	guo.mutation.SetVariant(s)
	return guo
}

// SetSpeed sets the "speed" field.
func (guo *GameUpdateOne) SetSpeed(s string) *GameUpdateOne {
	guo.mutation.SetSpeed(s)
	return guo
}

// SetPerf sets the "perf" field.
func (guo *GameUpdateOne) SetPerf(s string) *GameUpdateOne {
	guo.mutation.SetPerf(s)
	return guo
}

// SetCreatedAt sets the "createdAt" field.
func (guo *GameUpdateOne) SetCreatedAt(s string) *GameUpdateOne {
	guo.mutation.SetCreatedAt(s)
	return guo
}

// SetLastMoveAt sets the "lastMoveAt" field.
func (guo *GameUpdateOne) SetLastMoveAt(s string) *GameUpdateOne {
	guo.mutation.SetLastMoveAt(s)
	return guo
}

// SetStatus sets the "status" field.
func (guo *GameUpdateOne) SetStatus(s string) *GameUpdateOne {
	guo.mutation.SetStatus(s)
	return guo
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	var (
		err  error
		node *Game
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Game)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GameMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: game.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.WhitePlayerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWhitePlayerId,
		})
	}
	if value, ok := guo.mutation.WhitePlayerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWhitePlayerName,
		})
	}
	if value, ok := guo.mutation.WhitePlayerRatingDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWhitePlayerRatingDiff,
		})
	}
	if value, ok := guo.mutation.BlackPlayerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldBlackPlayerId,
		})
	}
	if value, ok := guo.mutation.BlackPlayerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldBlackPlayerName,
		})
	}
	if value, ok := guo.mutation.BlackPlayerRatingDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldBlackPlayerRatingDiff,
		})
	}
	if value, ok := guo.mutation.Winner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldWinner,
		})
	}
	if value, ok := guo.mutation.Moves(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldMoves,
		})
	}
	if value, ok := guo.mutation.ClockInitial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldClockInitial,
		})
	}
	if value, ok := guo.mutation.ClockIncrement(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldClockIncrement,
		})
	}
	if value, ok := guo.mutation.ClockTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldClockTotal,
		})
	}
	if value, ok := guo.mutation.Pgn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldPgn,
		})
	}
	if value, ok := guo.mutation.Rated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldRated,
		})
	}
	if value, ok := guo.mutation.Variant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldVariant,
		})
	}
	if value, ok := guo.mutation.Speed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldSpeed,
		})
	}
	if value, ok := guo.mutation.Perf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldPerf,
		})
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldCreatedAt,
		})
	}
	if value, ok := guo.mutation.LastMoveAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldLastMoveAt,
		})
	}
	if value, ok := guo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: game.FieldStatus,
		})
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
